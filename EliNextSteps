GGsDeepAgent vNext — 2500% Upgrade Playbook (Enterprise, Autonomous, Hacker‑Grade)

Prime Directive
- Evolve GGsDeepAgent into an autonomous, enterprise‑class engineering copilot whose new capabilities make the previous generation look like a proof‑of‑concept. Minimum 25× improvement across reliability, speed, safety, observability, and delivery throughput. If anything is underspecified, make a logical assessment and continue without blocking.

Outcome Targets (measurable, non‑negotiable)
- CI excellence: 100% green for GitHub Jobs — Build/Test/Coverage, Package (MSI+MSIX), and Health Check Gate (blue/green).
- Build speed: 50% faster cold build, 75% faster incremental builds via caching/parallelism.
- Failure containment: zero flaky tests; deterministic builds; circuit‑breakers and timeouts in all external calls.
- Observability: golden signals emitted (latency, error, saturation), trace correlation across desktop/server/agent.
- Security: signed artifacts, SBOM, SAST/secret scanning, reproducible builds, least‑privilege pipelines.

Operating Principles
- Fix root causes, not symptoms. Eliminate placeholders, nulls, and ambiguous states.
- Prefer idempotent, restartable operations. Every step can be rerun safely.
- Fail fast with precise diagnostics; never fail silently.
- Default secure: secrets from vault, no plaintext creds, signed outputs only.

Section A — GGsDeepAgent Architecture Upgrades
- Resilient core:
  - Structured concurrency; cancelation tokens everywhere; timeouts on I/O; exponential backoff + jitter.
  - Circuit‑breaker around external dependencies; dead‑letter queue for unprocessed work.
  - Strong typing at domain boundaries; input validation with actionable errors.
- Telemetry & tracing:
  - OpenTelemetry spans for key operations; correlation IDs propagated across desktop/server/agent.
  - Event‑level logging with stable schemas; PII‑safe redaction.
  - Health probes: liveness, readiness, and startup probes with self‑healing on failure.
- Performance & memory:
  - Async I/O; pooled buffers; zero‑allocation hot paths; cache with TTL + stampede protection.
  - Benchmark harness with micro/macro profiles; target 25× throughput on representative workloads.
- Safety & correctness:
  - Property‑based tests for critical invariants; fuzzing for inputs; fault injection for chaos testing.
  - Static analyzers enforced at build; nullable enabled; banned API usage list.

Deliverables (Agent)
- Refactored core worker(s) with cancellation, retries, and telemetry hooks.
- Guardrails: input validators, policy layer (retry/breaker), and safety contracts.
- Benchmarks with baselines + trend alerts; regression gates in CI.

Section B — Launchers 2.0 (Hacker‑grade, crash‑proof)
- Only three batch entrypoints at repo root:
  - Launch-Desktop.bat — clean build, verify, and launch the desktop app; optional auto‑start server.
  - Launch-ErrorLogViewer.bat — clean build, verify, and launch the Error Log Viewer.
  - Launch-All.bat — orchestrate server + desktop + viewer; run solution tests; dashboard + logs.
- Design intent:
  - Kill conflicting processes before building (GGs.* apps, msbuild, vstest, optional dotnet).
  - Dotnet clean on solution; publish into deterministic out/* directories; no stale artifacts.
  - Wrap PowerShell orchestrators in tools/launcher (Launch-*-New.ps1) with ForceBuild/ForcePort.
  - Timestamped logs in launcher-logs; clear exit codes; colorful hacker UX; test stubs with --test.

Section C — CI/CD: Make All GitHub Jobs Green
- Build, Test, Coverage
  - Matrix: Windows-latest, .NET 9.0. Cache NuGet and intermediate obj.
  - Steps: dotnet restore; dotnet build -c Release; dotnet test -c Release --collect:"XPlat Code Coverage".
  - Coverage: use coverlet + reportgenerator to produce Cobertura/HTML; enforce minimum thresholds.
  - Artifacts: test results and coverage reports uploaded; failure logs attached for triage.
- Package (MSI + MSIX)
  - MSIX (wapproj): deterministic versioning via Git tag; appxmanifest transformations per env.
  - Signing: import PFX from GitHub secret (base64) with secure password; sign all binaries; stamp catalog.
  - MSI (Wix/MSI): heat + candle + light or MSBuild WixToolset; sign final MSI; attach SBOM (CycloneDX).
  - Outputs: versioned artifacts pushed to Releases (draft) and retained as workflow artifacts.
- Health Check Gate (blue/green)
  - Deploy draft to ephemeral environment; smoke with Launch-All-New.ps1 in --test mode.
  - Probe endpoints: /healthz and /ready (server), desktop viewer heartbeat via named pipe or local TCP.
  - Gate policy: progress only on 200 OK health checks + zero errors in logs; otherwise auto‑rollback.

Reference Workflow (YAML sketch)
- name: CI
  on: [push, pull_request]
  jobs:
    build_test_coverage:
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-dotnet@v4
          with: { dotnet-version: '9.0.x' }
        - name: Restore
          run: dotnet restore GGs/GGs.sln
        - name: Build
          run: dotnet build GGs/GGs.sln -c Release --no-restore
        - name: Test + Coverage
          run: dotnet test GGs/GGs.sln -c Release --no-build --collect:"XPlat Code Coverage"
        - name: Publish coverage
          if: always()
          uses: actions/upload-artifact@v4
          with: { name: coverage, path: '**/TestResults/**' }
    package:
      runs-on: windows-latest
      needs: build_test_coverage
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-dotnet@v4
          with: { dotnet-version: '9.0.x' }
        - name: Import code signing cert
          shell: pwsh
          run: |
            $bytes = [Convert]::FromBase64String($env:CODE_SIGNING_PFX_BASE64)
            Set-Content -Path cert.pfx -Value $bytes -AsByteStream
        - name: Build MSIX + MSI
          shell: pwsh
          run: |
            dotnet publish GGs/clients/GGs.Desktop/GGs.Desktop.csproj -c Release -o out/desktop
            dotnet publish GGs/tools/GGs.ErrorLogViewer/GGs.ErrorLogViewer.csproj -c Release -o out/viewer
            msbuild GGs/packaging/msix/GGs.Desktop.Package/GGs.Desktop.Package.wapproj /p:Configuration=Release /p:GenerateAppxPackageOnBuild=true /p:AppxPackageDir=out/msix/ /p:PackageCertificateKeyFile="cert.pfx" /p:PackageCertificatePassword="$(CODE_SIGNING_PFX_PASSWORD)"
            rem Wix/MSI step here (tooling-dependent)
        - uses: actions/upload-artifact@v4
          with: { name: packages, path: out/** }
    health_gate:
      runs-on: windows-latest
      needs: package
      steps:
        - uses: actions/checkout@v4
        - name: Orchestrated smoke
          shell: pwsh
          run: GGs/tools/launcher/Launch-All-New.ps1 -Test -TestDurationSeconds 10
        - name: Verify health
          shell: pwsh
          run: |
            $ok = (Invoke-WebRequest -UseBasicParsing http://localhost:5000/healthz).StatusCode -eq 200
            if (-not $ok) { throw 'Health probe failed' }

Section D — Packaging Hardening (MSI + MSIX)
- Versioning: semantic version from tags; auto‑increment pre‑release for PR builds.
- Signing: centralized cert retrieval; timestamp service; verify signatures in CI.
- Installer UX: default silent switch; repair/uninstall idempotent; safe upgrades.
- MSIX manifest: Publisher, Identity, capabilities minimal; icons + assets validated.

Section E — Test Strategy (Agent, Server, Desktop, Viewer)
- Unit: fast, deterministic with mocks; required for critical code paths.
- Integration: real file I/O, networking on ephemeral ports; hermetic by default.
- E2E: emulator flows for desktop + viewer; golden screenshots for critical views.
- Chaos: fault injection scenarios scheduled nightly; verify recovery and alerting.

Section F — Observability & Ops
- Central logs with component+correlation; structured JSON; retention + rotation.
- Metrics: request duration, error rate, queue depth, memory, GC pauses.
- Alerts: build break, test failure, pkg signing failure, health gate breach.

Section G — Autonomous Execution Protocol (for the Agent)
- Discover → Propose → Implement → Validate → Ship loop with no manual stalls.
- If blocked by environment (e.g., cert), create stub tasks with clear prereqs and continue in parallel areas.
- Always write remediation steps into failure logs with next‑action hints.

Section H — Handoff & Rollback
- Rollback recipes for each deployable unit; artifact retention and provenance documented.
- Handoff doc summarizing changes, risks, toggles, and support playbooks.

Done Criteria
- All three launchers pass local smoke in both normal and --test modes.
- GitHub Actions shows all three jobs green: Build/Test/Coverage, Package (MSI+MSIX), Health gate.
- Agent throughput improved by 25× on benchmark suite; no regressions.

Work autonomously. Make strong, sensible assumptions. Deliver with receipts.


GGs.Agent Deep System Access Prompts (2000% Enhancement)

Mission & Scope
- [ ] Define deep-access consent model
- [ ] Validate non-admin defaults on target PC
- [ ] Align 25000% uplift KPIs and metrics

- Elevate GGs.Agent (responsible for collecting and applying tweaks) to dive as deep as Windows allows under explicit user permission, while remaining fully compatible with our C# codebase and non-admin defaults on this PC. Maintain the ≥ 25000% capability uplift target versus baseline.
- Planning only: do not change code or delete files yet. Implementation will follow in PRs.

Consent & Non-Admin Invariants
- [ ] Non-admin happy path validated
- [ ] UAC-decline branch exercised in tests
- [ ] Consent logging + fallback paths documented
- Operate non-elevated by default; treat UAC denial as an expected branch, not a failure. All core flows must succeed without admin.
- When a user explicitly consents, use a consent-gated elevation bridge to perform privileged work, log the reason, and degrade gracefully if declined.

Prompt 1 — Deep System Access Layers (C#‑First, Privilege‑Respecting) ✅ COMPLETED
- [x] Windows API Surfaces (C# compatible today)
  - [x] WMI/CIM: inventory and health via Win32_*, MSFT_* (hardware, drivers, storage, network, power, BitLocker, Device Guard, Hyper‑V status).
  - [x] ISystemAccessProvider interface with 13 methods for deep system access
  - [x] SystemAccessModels.cs with 686 lines of comprehensive data models
  - [x] WindowsSystemAccessProvider implementation with WMI inventory collection
  - [x] Privilege checking using WindowsIdentity
  - [x] Consent-gated elevation with explicit user approval
  - [x] Graceful degradation with warning accumulation
  - [x] 16/16 unit tests passing
  - [x] Zero errors, zero warnings in build
  - [x] ADR-002-Deep-System-Access.md documentation
  - [x] Event Logs: subscribe to Application/System and key Operational channels (SubscribeToEventLogsAsync, QueryEventLogsAsync)
  - [x] ETW (user mode sessions): high‑value providers (StartEtwSessionAsync, StopEtwSessionAsync with time-boxed sessions)
  - [x] Performance: PDH/System.Diagnostics counters (CollectPerformanceDataAsync with CPU/Memory/Disk/Network/Process metrics)
  - [x] Registry: typed access + change notifications (StartRegistryMonitorAsync, StopRegistryMonitorAsync with change tracking)
  - [x] Services: SCM queries (QueryServicesAsync with filtering by state, name, display name)
  - [x] Networking: IP Helper APIs (GetNetworkInfoAsync with adapters, DNS, routing, sockets)
  - [x] Certificates: X509Store monitoring (StartCertificateMonitorAsync, StopCertificateMonitorAsync)
  - [x] Windows Update: WUAPI COM (GetWindowsUpdateStatusAsync with service status checking)
  - [x] Power & Storage: powercfg integration, battery/thermal state (GetPowerStorageInfoAsync with PowerStatus and StorageStatus)
- [ ] Optional Depth (consent + elevation required; never auto‑escalate)
  - [ ] ETW kernel providers (Kernel‑Process, Kernel‑Network) for short controlled captures; Firewall rules via FwPolicy2 COM; AppLocker/WDAC policy reads; USN journal reads for file churn (read‑only analysis). All with strict opt‑in and time‑boxed sessions.

Prompt 2 — Tweak Capability Modules (Safe by Default, Powerful on Consent) ✅ COMPLETED
- [x] ITweakModule interface with Preflight, Apply, Verify, Rollback methods
- [x] Registry Tweak Module: typed writers/readers, preflight validation (existence/type/policy), atomic apply, verify, rollback; detailed Before -> After diffs in audit (523 lines)
- [x] Service Tweak Module: start/stop/restart/enable/disable with policy allow/deny sets; timeouts + reason‑coded results; never touch blocked critical services (488 lines)
- [x] Network Tweak Module: per‑adapter DNS set/clear, hosts file edits under policy; verify connectivity post‑change (282 lines)
- [x] Power & Performance Module: select power plans, all revertible and verified (316 lines)
- [x] Security Health Module: surface Defender and Firewall status via supported APIs; do not disable protections—only report and remediate within approved bounds (282 lines)
- [x] Extended TweakStateSerializer with NetworkState, PowerState, SecurityHealthState
- [x] 19/19 unit tests passing
- [x] Zero errors, zero warnings in build
- [x] ADR-003-Tweak-Capability-Modules.md documentation
- [ ] Update & Policy Module: read WU deferrals and channels (planned for future implementation)
- [ ] WinHTTP proxy set/clear (requires elevated privileges, planned for future)

Prompt 3 — Consent‑Gated Elevation Bridge (C# + Existing ElevatedEntry) ✅ COMPLETED
- [x] IElevationBridge interface with comprehensive contracts
- [x] ElevationBridge implementation with validation, execution, and rollback structure
- [x] Enhanced ElevatedEntry with structured logging and activity tracing
- [x] Declared intent for each operation (8 supported operation types)
- [x] Input contracts with payload validation
- [x] Rollback plan structure (full implementation pending)
- [x] Token elevation state detection using WindowsIdentity
- [x] Structured refusal with remediation steps when denied
- [x] Graceful degradation on non-admin path
- [x] 11/11 unit tests passing
- [x] Zero errors, zero warnings in build
- [x] ADR-004-Consent-Gated-Elevation-Bridge.md documentation

Prompt 4 — Telemetry, Correlation, and Trace Depth ✅ COMPLETED
- [x] TelemetryContext model with DeviceId + OperationId + CorrelationId + synchronized timestamps
- [x] EnhancedHeartbeatData with agent version, OS, uptime, working set, CPU count, connection state
- [x] Detailed health opts in via `Agent:SendDetailedHealthData=true`
- [x] Standardized ReasonCodes (CATEGORY.ACTION.Context.Detail format)
- [x] Enhanced TweakApplicationLog with OperationId, CorrelationId, InitiatedUtc, CompletedUtc, ReasonCode, PolicyDecision
- [x] Database migration with indexes for efficient querying
- [x] Worker enhanced with telemetry integration, ActivitySource, operation counters
- [x] Audit logging with telemetry context and reason codes
- [x] Enhanced heartbeat with health score calculation
- [x] Offline queue structure (encryption TODO)
- [x] Persist to: hub ACK, HTTP audit endpoint, encrypted offline queue structure
- [x] Stable schemas for long-term analytics
- [x] Zero errors, zero warnings in build
- [x] ADR-005-Telemetry-Correlation-Trace-Depth.md documentation
- [ ] Unit tests for telemetry components (planned)
- [ ] Integration tests for end-to-end telemetry flow (planned)
- [ ] Encryption implementation for offline queue (planned)

Prompt 5 — Safety, Policy, and Compliance
- ScriptPolicy: expand allow/block with normalized parsing; attach policy decisions and reasons to tweak logs.
- Null/placeholder eradication: enable nullable reference types across projects; enforce warnings‑as‑errors; replace stubs with production behavior or delete dead code.
- Privacy tiering: classify signals; redact/hash sensitive fields; explicit config flags to widen scope.

Prompt 6 — Launcher Replacement (.bat only, legacy deletion in implementation)
- The mood for the launchers should be like hacker or scripter
- Author brand‑new `.bat` launchers: `Launch-Desktop.bat`, `Launch-All.bat`, `Launch-ErrorLogViewer.bat`; delete all legacy launchers during implementation.
- Contracts: `--normal | --diag | --test` modes; logs in `launcher-logs`; preflight runtime/ports/disk/permissions; non‑admin safe by default; health probes; graceful shutdown in `--test`.
- Add `.bat` harness `Test-Launchers.bat` to smoke all modes, assert zero WARN/ERROR in logs, and verify health probes.

Prompt 7 — Validation & QA (C# Focused)
- Unit: Worker orchestration (ExecuteTweak lifecycle), TweakExecutor preflight/apply/verify/rollback, ScriptPolicy decisions, OfflineQueue enqueue/dispatch/backoff.
- Integration: SignalR (RegisterDevice/Heartbeat/ExecuteTweak), HTTP audit fallback, offline to online replays, launcher `--test` checks.
- Resilience: network partitions, cert store errors, DB corruption, refused elevation, script policy denials; mutation tests for core logic.

Prompt 8 — Definition of Done (DoD)
- Agent: ≥ 25000% capability uplift demonstrable via telemetry richness, tweak reliability, and resilience; no nulls/placeholders; nullable + warnings‑as‑errors on.
- Launchers: only new `.bat` scripts present; `--normal`/`--test` pass; logs clean; non‑admin paths succeed when UAC declined; ErrorLogViewer launches instantly.
- Security/SCM: SAST + secret scans clean; SBOM published; signed, reproducible artifacts.
- Docs: updated runbooks, data‑flow diagrams, ADRs for deep‑access decisions, and launcher behavior sheets.

Prompt 9 — Execution Guardrails (verbatim, required phrases)
- if anything is unclear then make proper assesments and continue
- run fully autonoumsly
- dont surpress issues
- always fix the root cause
- andmany other good instructions you think would be good
- Maintain bias for validated outcomes; capture assumptions/risks/dependencies; publish interim status, test evidence, and decision logs.

Assumptions
- [ ] Non-admin environment validated
- [ ] Consent-gated elevation paths documented
- [ ] Planning-only change acknowledged
- This PC blocks admin by default; treat admin denial as expected in tests. All privileged features are consent‑gated and optional, never required for core flows.
- Planning only; implementation PRs will stage changes with tests and documentation.
Operational Mandate — Autonomous, No-Placeholder Execution
- [ ] Run fully autonoumsly with a strong bias for action; minimize handoffs.
- [ ] If anything is unclear then make proper assesments and continue without blocking; document assumptions inline.
- [ ] Dont surpress issues; surface root causes with remediation steps and next actions.
- [ ] Always fix the root cause; avoid band-aids and one-off hacks.
- [ ] Do not build any nulls or placeholders; if you encounter any, replace them immediately with production-grade implementations (no stubs, no TODOs).
- [ ] Enforce nullable reference types and treat warnings as errors across all touched projects.
- [ ] Guarantee idempotent, restartable operations with explicit rollback paths.
- [ ] Emit structured, reason-coded logs; include correlation IDs and stable schemas.
- [ ] Respect least-privilege by default; gate elevated operations behind explicit, audited consent.
- [ ] Maintain comprehensive tests (unit, integration, resilience, mutation) for all changes.
- [ ] Keep documentation current: ADRs, runbooks, troubleshooting guides, and change logs.
- [ ] Optimize for reliability and speed: bounded retries with jitter, circuit breakers, and backpressure.
- [ ] Security first: no plaintext secrets, signed artifacts, SBOMs, and CI SAST/secret scanning.
- [ ] Provide receipts: link each change to evidence (logs, test output, benchmarks) before shipping.

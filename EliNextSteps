GGs.Agent Deep System Access Prompts (2000% Enhancement)

Mission & Scope
- [ ] Define deep-access consent model
- [ ] Validate non-admin defaults on target PC
- [ ] Align 25000% uplift KPIs and metrics

- Elevate GGs.Agent (responsible for collecting and applying tweaks) to dive as deep as Windows allows under explicit user permission, while remaining fully compatible with our C# codebase and non-admin defaults on this PC. Maintain the ≥ 25000% capability uplift target versus baseline.
- Planning only: do not change code or delete files yet. Implementation will follow in PRs.

Consent & Non-Admin Invariants
- [ ] Non-admin happy path validated
- [ ] UAC-decline branch exercised in tests
- [ ] Consent logging + fallback paths documented
- Operate non-elevated by default; treat UAC denial as an expected branch, not a failure. All core flows must succeed without admin.
- When a user explicitly consents, use a consent-gated elevation bridge to perform privileged work, log the reason, and degrade gracefully if declined.

Prompt 1 — Deep System Access Layers (C#‑First, Privilege‑Respecting)
- Windows API Surfaces (C# compatible today)
  - WMI/CIM: inventory and health via Win32_*, MSFT_* (hardware, drivers, storage, network, power, BitLocker, Device Guard, Hyper‑V status).
  - Event Logs: subscribe to Application/System and key Operational channels (WindowsUpdateClient/Operational, WMI/Activity, AppLocker, DeviceGuard, Storage‑ClassPnP, Security‑Center notes where accessible without admin).
  - ETW (user mode sessions): high‑value providers (Microsoft‑Windows‑WMI‑Activity, Microsoft‑Windows‑WinINet, Microsoft‑Windows‑WinHTTP, Microsoft‑Windows‑WindowsUpdateClient, Microsoft‑Windows‑AppModel). Kernel session only when user permits elevation.
  - Performance: PDH/System.Diagnostics counters for CPU, memory, disk, network; per‑process sampling for top offenders.
  - Registry: typed access + change notifications via RegNotifyChangeKeyValue (P/Invoke) on HKCU/HKLM; structured diffs and rollback snapshots.
  - Services: SCM queries (ServiceController + QueryServiceStatus/QueryServiceConfig via P/Invoke); enforce policy blocks for critical services.
  - Networking: IP Helper APIs (GetAdaptersAddresses, GetExtendedTcpTable) for interface, DNS, and socket state; WinHTTP/WinINET proxy inspection.
  - Certificates: X509Store (CurrentUser) monitoring for enrollment and trust changes; mTLS bootstrap.
  - Windows Update: WUAPI COM (IUpdateSession/IUpdateSearcher) for state, history, last error; no forced scans without consent.
  - Power & Storage: powercfg integration, battery/thermal state (WMI), Storage WMI (ROOT\Microsoft\Windows\Storage) for volume health.
- Optional Depth (consent + elevation required; never auto‑escalate)
  - ETW kernel providers (Kernel‑Process, Kernel‑Network) for short controlled captures; Firewall rules via FwPolicy2 COM; AppLocker/WDAC policy reads; USN journal reads for file churn (read‑only analysis). All with strict opt‑in and time‑boxed sessions.

Prompt 2 — Tweak Capability Modules (Safe by Default, Powerful on Consent)
- Registry Tweak Module: typed writers/readers, preflight validation (existence/type/policy), atomic apply, verify, rollback; detailed Before -> After diffs in audit.
- Service Tweak Module: start/stop/restart/enable/disable with policy allow/deny sets; timeouts + reason‑coded results; never touch blocked critical services.
- Network Tweak Module: per‑adapter DNS set/clear, WinHTTP proxy set/clear, hosts file edits under policy; verify connectivity post‑change.
- Update & Policy Module: read WU deferrals and channels; toggle only with explicit consent and documented policy gates; never break enterprise policy.
- Power & Performance Module: select power plans, background app throttling, scheduled maintenance windows; all revertible and verified.
- Security Health Module: surface Defender and Firewall status via supported APIs; do not disable protections—only report and remediate within approved bounds.

Prompt 3 — Consent‑Gated Elevation Bridge (C# + Existing ElevatedEntry)
- Use the existing `ElevatedEntry` pathway to run discrete, audited privileged tasks. Never chain arbitrary commands; each action requires a declared intent, input contract, and rollback plan.
- Detect token elevation state; when denied, record a structured refusal with remediation steps and continue on the non‑admin path.

Prompt 4 — Telemetry, Correlation, and Trace Depth
- Every operation carries DeviceId + OperationId + CorrelationId with synchronized timestamps. Persist to: hub ACK, HTTP audit endpoint, and encrypted offline queue.
- Heartbeats include agent version, OS, uptime, working set, CPU count, connection state; detailed health opts in via `Agent:SendDetailedHealthData=true`.
- Normalize logs with reason codes (e.g., POLICY.DENY.ServiceStop.WinDefend) and stable schemas for long‑term analytics.

Prompt 5 — Safety, Policy, and Compliance
- ScriptPolicy: expand allow/block with normalized parsing; attach policy decisions and reasons to tweak logs.
- Null/placeholder eradication: enable nullable reference types across projects; enforce warnings‑as‑errors; replace stubs with production behavior or delete dead code.
- Privacy tiering: classify signals; redact/hash sensitive fields; explicit config flags to widen scope.

Prompt 6 — Launcher Replacement (.bat only, legacy deletion in implementation)
- Author brand‑new `.bat` launchers: `Launch-Desktop.bat`, `Launch-All.bat`, `Launch-ErrorLogViewer.bat`; delete all legacy launchers during implementation.
- Contracts: `--normal | --diag | --test` modes; logs in `launcher-logs`; preflight runtime/ports/disk/permissions; non‑admin safe by default; health probes; graceful shutdown in `--test`.
- Add `.bat` harness `Test-Launchers.bat` to smoke all modes, assert zero WARN/ERROR in logs, and verify health probes.

Prompt 7 — Validation & QA (C# Focused)
- Unit: Worker orchestration (ExecuteTweak lifecycle), TweakExecutor preflight/apply/verify/rollback, ScriptPolicy decisions, OfflineQueue enqueue/dispatch/backoff.
- Integration: SignalR (RegisterDevice/Heartbeat/ExecuteTweak), HTTP audit fallback, offline to online replays, launcher `--test` checks.
- Resilience: network partitions, cert store errors, DB corruption, refused elevation, script policy denials; mutation tests for core logic.

Prompt 8 — Definition of Done (DoD)
- Agent: ≥ 25000% capability uplift demonstrable via telemetry richness, tweak reliability, and resilience; no nulls/placeholders; nullable + warnings‑as‑errors on.
- Launchers: only new `.bat` scripts present; `--normal`/`--test` pass; logs clean; non‑admin paths succeed when UAC declined; ErrorLogViewer launches instantly.
- Security/SCM: SAST + secret scans clean; SBOM published; signed, reproducible artifacts.
- Docs: updated runbooks, data‑flow diagrams, ADRs for deep‑access decisions, and launcher behavior sheets.

Prompt 9 — Execution Guardrails (verbatim, required phrases)
- if anything is unclear then make proper assesments and continue
- run fully autonoumsly
- dont surpress issues
- always fix the root cause
- andmany other good instructions you think would be good
- Maintain bias for validated outcomes; capture assumptions/risks/dependencies; publish interim status, test evidence, and decision logs.

Assumptions
- [ ] Non-admin environment validated
- [ ] Consent-gated elevation paths documented
- [ ] Planning-only change acknowledged
- This PC blocks admin by default; treat admin denial as expected in tests. All privileged features are consent‑gated and optional, never required for core flows.
- Planning only; implementation PRs will stage changes with tests and documentation.
Operational Mandate — Autonomous, No-Placeholder Execution
- [ ] Run fully autonoumsly with a strong bias for action; minimize handoffs.
- [ ] If anything is unclear then make proper assesments and continue without blocking; document assumptions inline.
- [ ] Dont surpress issues; surface root causes with remediation steps and next actions.
- [ ] Always fix the root cause; avoid band-aids and one-off hacks.
- [ ] Do not build any nulls or placeholders; if you encounter any, replace them immediately with production-grade implementations (no stubs, no TODOs).
- [ ] Enforce nullable reference types and treat warnings as errors across all touched projects.
- [ ] Guarantee idempotent, restartable operations with explicit rollback paths.
- [ ] Emit structured, reason-coded logs; include correlation IDs and stable schemas.
- [ ] Respect least-privilege by default; gate elevated operations behind explicit, audited consent.
- [ ] Maintain comprehensive tests (unit, integration, resilience, mutation) for all changes.
- [ ] Keep documentation current: ADRs, runbooks, troubleshooting guides, and change logs.
- [ ] Optimize for reliability and speed: bounded retries with jitter, circuit breakers, and backpressure.
- [ ] Security first: no plaintext secrets, signed artifacts, SBOMs, and CI SAST/secret scanning.
- [ ] Provide receipts: link each change to evidence (logs, test output, benchmarks) before shipping.

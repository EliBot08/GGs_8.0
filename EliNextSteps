GGs Enterprise UI/UX Overhaul — Master Plan (Desktop + ErrorLogViewer)

Non‑negotiables
- All features must be fully functional and polished (no rough edges).
- Zero placeholders and zero nulls across UI, bindings, texts, icons, and commands.
- Fix root causes, not symptoms. If something is unclear, make a logical assessment and continue.
- Three launchers only: Launch-Desktop.bat, Launch-ErrorLogViewer.bat, Launch-All.bat — all crash-proof.
- Smooth startups with welcoming onboarding for both apps.
- Multiple hacker/tweaker themes with persistence and fast micro-interactions.
- Verified via builds, smokes, and targeted tests; nothing crashes.

Vision & Vibe
- Identity: “GGs Pro” — sleek dark neon, subtle circuit textures, glass overlays, cohesive gradients.
- Mood: Hacker/tweaker confidence without gimmicks; enterprise-grade polish.
- Motion: Purposeful micro-animations (80–200ms) with smooth easing; never intrusive.
- Themes: Midnight Cyan (primary), Vapor Purple, Tactical Green, Carbon Minimal, plus Auto (OS-follow).

Phase 1 — Foundation (Design System & Theme)
- Theme dictionaries per app (colors, typography, depth, effects, animations, controls) with shared naming:
  - ThemeBackground*, ThemeText*, ThemeAccent*, ThemeBorder*.
- Animations (reusable Storyboards): FadeIn, SlideUp, SlideFromLeft, ScaleIn, Glow, Pulse.
- Controls: PrimaryButton, SecondaryButton, GhostButton, IconButton (press/hover spring + ripple),
  ElevatedCard, SectionCard, Badge, TagPill, TogglePill, TextBox/ComboBox enterprise styles.
- Theme engine: ThemeManagerService per app (CurrentTheme, AvailableThemes, Save/Load to profile),
  auto-detect OS light/dark with manual override + persistence.
- Accessibility: Focus visuals, minimum contrast, keyboard navigation defaults.

Deliverables:
- GGs.Desktop: Views/Themes/EnterpriseThemes.xaml, EnterpriseControlStyles.xaml.
- ErrorLogViewer: Views/EnterpriseThemes.xaml, EnterpriseControlStyles.xaml.
- ThemeManagerService (desktop), extend IThemeService (viewer) for persistence.

Phase 2 — Navigation & Shell
- Desktop (ModernMainWindow):
  - Title bar: accent gradient line, app title, status (license/ping), window controls.
  - Left nav rail: glowing selection, tooltips, hotkeys, full keyboard support.
  - Content area: card-based dashboards; consistent paddings; animated page transitions.
- ErrorLogViewer (MainWindow):
  - Hero header with live status (monitoring, directory breadcrumb, counts).
  - Left workspace panel: Logs, Analytics, Bookmarks, Alerts, Compare, Export, Settings.
  - Content region: premium DataGrid for Logs; stat cards for Analytics; actionable cards for
    Bookmarks/Alerts; dedicated views for Compare/Export/Settings.

Phase 3 — Onboarding & Startup Experience
- Desktop:
  - Smooth cold start: Welcome hero — “Welcome to GGs — Optimizing your experience…”.
  - Background init (logging, telemetry, entitlements, theme) with busy overlay; no UI thread stalls.
  - First-run checklist and “Get Started” CTA (profiles/settings).
- ErrorLogViewer:
  - Welcome banner: “Error Intelligence Center — Ready to analyze.”
  - Quick actions: Open logs folder, Start Monitoring, Import Sample Log.
  - Restore last directory/view/layout across launches.

Phase 4 — Button/Action Wiring & Zero‑Placeholder Guarantee
- Inventory all buttons/menus across both apps.
- For every command:
  - Implement full behavior or disable intentionally with a clear tooltip explaining why.
  - No placeholder text, icons, or dead buttons.
- Replace all garbled unicode; use clean glyphs/vectors only.
- Guard every binding (value converters & defaults) — no null reference risks.

Deliverables:
- Command audit checklist & implementations; disabled-with-explanation where out of scope.
- Lint pass for “placeholder”, “lorem”, TODOs, garbled glyphs.

Phase 5 — Error Log Viewer: Logs View (Enterprise DataGrid)
- DataGrid polish:
  - Virtualization on, row templates by level: left accent bar; distinct hover/selected.
  - Columns: level icon, timestamp, source pill, compact/raw message (toggle), optional file path.
  - Context menu: Copy Selected / Raw / Compact / Details.
- Details panel:
  - Message, source, timestamp, level, tags, Raw payload expander, Exception/StackTrace expanders (monospace). 
- Filters:
  - Text search with regex toggle, level/source filters, Smart Filter (dedupe), font-size slider, auto-scroll toggle.

Deliverables:
- Null-safe converters; no runtime binding errors.
- Export selected logs to CSV/JSON; verified SaveFileDialog flow.

Phase 6 — Error Log Viewer: Analytics, Bookmarks, Alerts
- Analytics:
  - Stat cards: Health Score, Errors/Warns, rates, Top Sources; anomaly triggers (basic).
- Bookmarks:
  - Add/Remove/GoTo; TagPill rendering; persisted bookmarks.
- Alerts:
  - Simple rules; Triggered alert cards (name, pattern, time), Acknowledge action.

Deliverables:
- EnhancedMainViewModel commands wired; disable with explanation when no data.
- All features functional and polished in these sections.

Phase 7 — GGs.Desktop Views Revamp
- Dashboard: Health, Recommendations, Quick Actions (Game Mode, Boost, Clean) as polished cards.
- Optimization & Monitoring: enterprise styles for toggles/sliders; helper text; safe background tasks.
- Network/Profiles/System Intelligence/Notifications/Settings: apply design system, real commands,
  clear disabled states for unimplemented.
- Theme toggle: animated icon swap and fade, persisted.

Deliverables:
- Clean iconography; no garbled content; consistent spacing & elevation.

Phase 8 — Accessibility, Keyboard, Performance
- Keyboard nav: TabIndex where needed; focus visuals.
- High contrast variants & sufficient contrast ratios.
- Respect “Reduce motion” if available; keep animations subtle.
- Offload heavy work to background threads; never block UI >100ms.

Deliverables:
- Manual keyboard test script; optional perf traces for heavy views.

Phase 9 — Launchers (exactly 3)
- Launch-ErrorLogViewer.bat
  - Clean → Build → Verify exe → Launch; flags: --release, --no-restore, --no-launch; detailed logs.
- Launch-Desktop.bat
  - Clean → Build → Verify exe → Launch; optional --with-server (auto-start local server).
- Launch-All.bat
  - Clean/build server+desktop+viewer; run solution tests; launch both apps; shared flags; logs.
- All launchers are crash-proof with clear messages and non-zero exit codes on failure.

Deliverables:
- Remove old launchers; keep these 3 only. Smoke-test common failure modes.

Phase 10 — Test Strategy (Builds, Smokes, Functionals)
- Builds: dotnet build solution in Debug and Release.
- UI smokes:
  - Both apps launch; welcome experience shows; nav works; theme toggle persists across restarts.
- ErrorLogViewer functionals:
  - Regex search, level/source filter, raw/compact toggle, export CSV/JSON, details expanders, bookmarks, alerts.
- Launchers:
  - Simulate missing SDK/build errors/missing exe; confirm graceful exits and accurate log messages.
- Enforcement:
  - Automated scans for placeholders/garbled glyphs; runtime check for binding errors (Output window).

Deliverables:
- Test checklist with pass/fail for all polished features.
- Batch test helpers for quick local verification.

Phase 11 — Root‑Cause Fix Policy
- Any discovered issue is fixed at the source:
  - Null bindings → set defaults, add converters, or initialize properties.
  - Missing command → implement or explicitly disable with clear UX text.
  - Layout issues → correct styles/templates, not band-aid Visibility hacks.

Deliverables:
- Issue log with root-cause notes and file references.

Phase 12 — Final Polish & Handoff
- Consistency pass on spacing, typography, shadows, hover states.
- Verify theme persistence & cross-app identity.
- Verify launcher logs and exit codes are pristine.
- Short user guide covering themes, navigation, key tasks, exporting, and launchers.

Execution Notes
- Work autonomously; make logical assessments where requirements are underspecified.
- Keep changes focused and high quality; do not introduce placeholders.
- All features must be polished before sign-off.
- Final verification: dotnet build (Debug/Release), run all launchers, execute smoke + functional tests.
